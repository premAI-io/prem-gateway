// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const getAllApiKeys = `-- name: GetAllApiKeys :many
SELECT a.id, a.is_root, a.service_name, r.requests_per_range, r.range_in_seconds
FROM api_key a
    left join rate_limit r on a.rate_limit_id = r.id ORDER BY a.id
`

type GetAllApiKeysRow struct {
	ID               string
	IsRoot           sql.NullBool
	ServiceName      sql.NullString
	RequestsPerRange sql.NullInt32
	RangeInSeconds   sql.NullInt32
}

func (q *Queries) GetAllApiKeys(ctx context.Context) ([]GetAllApiKeysRow, error) {
	rows, err := q.db.Query(ctx, getAllApiKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllApiKeysRow
	for rows.Next() {
		var i GetAllApiKeysRow
		if err := rows.Scan(
			&i.ID,
			&i.IsRoot,
			&i.ServiceName,
			&i.RequestsPerRange,
			&i.RangeInSeconds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApiKeyForServiceName = `-- name: GetApiKeyForServiceName :many
SELECT a.id, a.is_root, a.service_name, r.requests_per_range, r.range_in_seconds
FROM api_key a
    inner join rate_limit r on a.rate_limit_id = r.id
WHERE a.service_name = $1 ORDER BY a.id
`

type GetApiKeyForServiceNameRow struct {
	ID               string
	IsRoot           sql.NullBool
	ServiceName      sql.NullString
	RequestsPerRange sql.NullInt32
	RangeInSeconds   sql.NullInt32
}

func (q *Queries) GetApiKeyForServiceName(ctx context.Context, serviceName sql.NullString) ([]GetApiKeyForServiceNameRow, error) {
	rows, err := q.db.Query(ctx, getApiKeyForServiceName, serviceName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApiKeyForServiceNameRow
	for rows.Next() {
		var i GetApiKeyForServiceNameRow
		if err := rows.Scan(
			&i.ID,
			&i.IsRoot,
			&i.ServiceName,
			&i.RequestsPerRange,
			&i.RangeInSeconds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootApiKey = `-- name: GetRootApiKey :one
SELECT id FROM api_key WHERE is_root = true
`

func (q *Queries) GetRootApiKey(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getRootApiKey)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertApiKey = `-- name: InsertApiKey :exec
INSERT INTO api_key (id, is_root, rate_limit_id, service_name) VALUES ($1, $2, $3, $4)
`

type InsertApiKeyParams struct {
	ID          string
	IsRoot      sql.NullBool
	RateLimitID sql.NullInt32
	ServiceName sql.NullString
}

func (q *Queries) InsertApiKey(ctx context.Context, arg InsertApiKeyParams) error {
	_, err := q.db.Exec(ctx, insertApiKey,
		arg.ID,
		arg.IsRoot,
		arg.RateLimitID,
		arg.ServiceName,
	)
	return err
}

const insertRateLimitAndReturnID = `-- name: InsertRateLimitAndReturnID :one
INSERT INTO rate_limit (requests_per_range, range_in_seconds) VALUES ($1, $2) RETURNING id
`

type InsertRateLimitAndReturnIDParams struct {
	RequestsPerRange sql.NullInt32
	RangeInSeconds   sql.NullInt32
}

func (q *Queries) InsertRateLimitAndReturnID(ctx context.Context, arg InsertRateLimitAndReturnIDParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertRateLimitAndReturnID, arg.RequestsPerRange, arg.RangeInSeconds)
	var id int32
	err := row.Scan(&id)
	return id, err
}
