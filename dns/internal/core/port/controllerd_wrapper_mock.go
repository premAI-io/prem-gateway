// Code generated by mockery v2.33.1. DO NOT EDIT.

package port

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockControllerdWrapper is an autogenerated mock type for the ControllerdWrapper type
type MockControllerdWrapper struct {
	mock.Mock
}

// DomainDeleted provides a mock function with given fields: ctx, domainName
func (_m *MockControllerdWrapper) DomainDeleted(ctx context.Context, domainName string) error {
	ret := _m.Called(ctx, domainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, domainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DomainProvisioned provides a mock function with given fields: ctx, email, domainName
func (_m *MockControllerdWrapper) DomainProvisioned(ctx context.Context, email string, domainName string) error {
	ret := _m.Called(ctx, email, domainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, domainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockControllerdWrapper creates a new instance of MockControllerdWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControllerdWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControllerdWrapper {
	mock := &MockControllerdWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
